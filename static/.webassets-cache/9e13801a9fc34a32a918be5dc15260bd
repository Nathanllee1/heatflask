V/** @license\u000a * eventsource.js\u000a * Available under MIT License (MIT)\u000a * https://github.com/Yaffle/EventSource/\u000a */\u000a\u000a/*jslint indent: 2, vars: true, plusplus: true */\u000a/*global setTimeout, clearTimeout */\u000a\u000a(function (global) {\u000a  "use strict";\u000a\u000a  var setTimeout = global.setTimeout;\u000a  var clearTimeout = global.clearTimeout;\u000a\u000a  var k = function () {};\u000a\u000a  function XHRTransport(xhr, onStartCallback, onProgressCallback, onFinishCallback, thisArg) {\u000a    this._internal = new XHRTransportInternal(xhr, onStartCallback, onProgressCallback, onFinishCallback, thisArg);\u000a  }\u000a\u000a  XHRTransport.prototype.open = function (url, withCredentials) {\u000a    this._internal.open(url, withCredentials);\u000a  };\u000a\u000a  XHRTransport.prototype.cancel = function () {\u000a    this._internal.cancel();\u000a  };\u000a\u000a  function XHRTransportInternal(xhr, onStartCallback, onProgressCallback, onFinishCallback, thisArg) {\u000a    this.onStartCallback = onStartCallback;\u000a    this.onProgressCallback = onProgressCallback;\u000a    this.onFinishCallback = onFinishCallback;\u000a    this.thisArg = thisArg;\u000a    this.xhr = xhr;\u000a    this.state = 0;\u000a    this.charOffset = 0;\u000a    this.offset = 0;\u000a    this.url = "";\u000a    this.withCredentials = false;\u000a    this.timeout = 0;\u000a  }\u000a\u000a  XHRTransportInternal.prototype.onStart = function () {\u000a    if (this.state === 1) {\u000a      this.state = 2;\u000a      var status = 0;\u000a      var statusText = "";\u000a      var contentType = undefined;\u000a      if (!("contentType" in this.xhr)) {\u000a        try {\u000a          status = this.xhr.status;\u000a          statusText = this.xhr.statusText;\u000a          contentType = this.xhr.getResponseHeader("Content-Type");\u000a        } catch (error) {\u000a          // https://bugs.webkit.org/show_bug.cgi?id=29121\u000a          status = 0;\u000a          statusText = "";\u000a          contentType = undefined;\u000a          // FF < 14, WebKit\u000a          // https://bugs.webkit.org/show_bug.cgi?id=29658\u000a          // https://bugs.webkit.org/show_bug.cgi?id=77854\u000a        }\u000a      } else {\u000a        status = 200;\u000a        statusText = "OK";\u000a        contentType = this.xhr.contentType;\u000a      }\u000a      if (contentType == undefined) {\u000a        contentType = "";\u000a      }\u000a      this.onStartCallback.call(this.thisArg, status, statusText, contentType);\u000a    }\u000a  };\u000a  XHRTransportInternal.prototype.onProgress = function () {\u000a    this.onStart();\u000a    if (this.state === 2 || this.state === 3) {\u000a      this.state = 3;\u000a      var responseText = "";\u000a      try {\u000a        responseText = this.xhr.responseText;\u000a      } catch (error) {\u000a        // IE 8 - 9 with XMLHttpRequest\u000a      }\u000a      var chunkStart = this.charOffset;\u000a      var length = responseText.length;\u000a      for (var i = this.offset; i < length; i += 1) {\u000a        var c = responseText.charCodeAt(i);\u000a        if (c === "\u005cn".charCodeAt(0) || c === "\u005cr".charCodeAt(0)) {\u000a          this.charOffset = i + 1;\u000a        }\u000a      }\u000a      this.offset = length;\u000a      var chunk = responseText.slice(chunkStart, this.charOffset);\u000a      this.onProgressCallback.call(this.thisArg, chunk);\u000a    }\u000a  };\u000a  XHRTransportInternal.prototype.onFinish = function () {\u000a    // IE 8 fires "onload" without "onprogress\u000a    this.onProgress();\u000a    if (this.state === 3) {\u000a      this.state = 4;\u000a      if (this.timeout !== 0) {\u000a        clearTimeout(this.timeout);\u000a        this.timeout = 0;\u000a      }\u000a      this.onFinishCallback.call(this.thisArg);\u000a    }\u000a  };\u000a  XHRTransportInternal.prototype.onReadyStateChange = function () {\u000a    if (this.xhr != undefined) {\u000a      // Opera 12\u000a      if (this.xhr.readyState === 4) {\u000a        if (this.xhr.status === 0) {\u000a          this.onFinish();\u000a        } else {\u000a          this.onFinish();\u000a        }\u000a      } else if (this.xhr.readyState === 3) {\u000a        this.onProgress();\u000a      } else if (this.xhr.readyState === 2) {\u000a        // Opera 10.63 throws exception for `this.xhr.status`\u000a        // this.onStart();\u000a      }\u000a    }\u000a  };\u000a  XHRTransportInternal.prototype.onTimeout2 = function () {\u000a    this.timeout = 0;\u000a    var tmp = /^data\u005c:([^,]*?)(base64)?,([\u005cS]*)$/.exec(this.url);\u000a    var contentType = tmp[1];\u000a    var data = tmp[2] === "base64" ? global.atob(tmp[3]) : decodeURIComponent(tmp[3]);\u000a    if (this.state === 1) {\u000a      this.state = 2;\u000a      this.onStartCallback.call(this.thisArg, 200, "OK", contentType);\u000a    }\u000a    if (this.state === 2 || this.state === 3) {\u000a      this.state = 3;\u000a      this.onProgressCallback.call(this.thisArg, data);\u000a    }\u000a    if (this.state === 3) {\u000a      this.state = 4;\u000a      this.onFinishCallback.call(this.thisArg);\u000a    }\u000a  };\u000a  XHRTransportInternal.prototype.onTimeout1 = function () {\u000a    this.timeout = 0;\u000a    this.open(this.url, this.withCredentials);\u000a  };\u000a  XHRTransportInternal.prototype.onTimeout0 = function () {\u000a    var that = this;\u000a    this.timeout = setTimeout(function () {\u000a      that.onTimeout0();\u000a    }, 500);\u000a    if (this.xhr.readyState === 3) {\u000a      this.onProgress();\u000a    }\u000a  };\u000a  XHRTransportInternal.prototype.handleEvent = function (event) {\u000a    if (event.type === "load") {\u000a      this.onFinish();\u000a    } else if (event.type === "error") {\u000a      this.onFinish();\u000a    } else if (event.type === "abort") {\u000a      // improper fix to match Firefox behaviour, but it is better than just ignore abort\u000a      // see https://bugzilla.mozilla.org/show_bug.cgi?id=768596\u000a      // https://bugzilla.mozilla.org/show_bug.cgi?id=880200\u000a      // https://code.google.com/p/chromium/issues/detail?id=153570\u000a      // IE 8 fires "onload" without "onprogress\u000a      this.onFinish();\u000a    } else if (event.type === "progress") {\u000a      this.onProgress();\u000a    } else if (event.type === "readystatechange") {\u000a      this.onReadyStateChange();\u000a    }\u000a  };\u000a  XHRTransportInternal.prototype.open = function (url, withCredentials) {\u000a    if (this.timeout !== 0) {\u000a      clearTimeout(this.timeout);\u000a      this.timeout = 0;\u000a    }\u000a\u000a    this.url = url;\u000a    this.withCredentials = withCredentials;\u000a\u000a    this.state = 1;\u000a    this.charOffset = 0;\u000a    this.offset = 0;\u000a\u000a    var that = this;\u000a\u000a    var tmp = /^data\u005c:([^,]*?)(?:;base64)?,[\u005cS]*$/.exec(url);\u000a    if (tmp != undefined) {\u000a      this.timeout = setTimeout(function () {\u000a        that.onTimeout2();\u000a      }, 0);\u000a      return;\u000a    }\u000a\u000a    // loading indicator in Safari, Chrome < 14\u000a    // loading indicator in Firefox\u000a    // https://bugzilla.mozilla.org/show_bug.cgi?id=736723\u000a    if ((!("ontimeout" in this.xhr) || "sendAsBinary" in this.xhr || "mozAnon" in this.xhr) && global.document != undefined && global.document.readyState != undefined && global.document.readyState !== "complete") {\u000a      this.timeout = setTimeout(function () {\u000a        that.onTimeout1();\u000a      }, 4);\u000a      return;\u000a    }\u000a\u000a    // XDomainRequest#abort removes onprogress, onerror, onload\u000a    this.xhr.onload = function (event) {\u000a      that.handleEvent({ type: "load" });\u000a    };\u000a    this.xhr.onerror = function () {\u000a      that.handleEvent({ type: "error" });\u000a    };\u000a    this.xhr.onabort = function () {\u000a      that.handleEvent({ type: "abort" });\u000a    };\u000a    this.xhr.onprogress = function () {\u000a      that.handleEvent({ type: "progress" });\u000a    };\u000a    // IE 8-9 (XMLHTTPRequest)\u000a    // Firefox 3.5 - 3.6 - ? < 9.0\u000a    // onprogress is not fired sometimes or delayed\u000a    // see also #64\u000a    this.xhr.onreadystatechange = function () {\u000a      that.handleEvent({ type: "readystatechange" });\u000a    };\u000a\u000a    this.xhr.open("GET", url, true);\u000a\u000a    // withCredentials should be set after "open" for Safari and Chrome (< 19 ?)\u000a    this.xhr.withCredentials = withCredentials;\u000a\u000a    this.xhr.responseType = "text";\u000a\u000a    if ("setRequestHeader" in this.xhr) {\u000a      // Request header field Cache-Control is not allowed by Access-Control-Allow-Headers.\u000a      // "Cache-control: no-cache" are not honored in Chrome and Firefox\u000a      // https://bugzilla.mozilla.org/show_bug.cgi?id=428916\u000a      //this.xhr.setRequestHeader("Cache-Control", "no-cache");\u000a      this.xhr.setRequestHeader("Accept", "text/event-stream");\u000a      // Request header field Last-Event-ID is not allowed by Access-Control-Allow-Headers.\u000a      //this.xhr.setRequestHeader("Last-Event-ID", this.lastEventId);\u000a    }\u000a\u000a    try {\u000a      this.xhr.send(undefined);\u000a    } catch (error1) {\u000a      // Safari 5.1.7, Opera 12\u000a      throw error1;\u000a    }\u000a\u000a    if ("readyState" in this.xhr && global.opera != undefined) {\u000a      // workaround for Opera issue with "progress" events\u000a      this.timeout = setTimeout(function () {\u000a        that.onTimeout0();\u000a      }, 0);\u000a    }\u000a  };\u000a  XHRTransportInternal.prototype.cancel = function () {\u000a    if (this.state !== 0 && this.state !== 4) {\u000a      this.state = 4;\u000a      this.xhr.onload = k;\u000a      this.xhr.onerror = k;\u000a      this.xhr.onabort = k;\u000a      this.xhr.onprogress = k;\u000a      this.xhr.onreadystatechange = k;\u000a      this.xhr.abort();\u000a      if (this.timeout !== 0) {\u000a        clearTimeout(this.timeout);\u000a        this.timeout = 0;\u000a      }\u000a      this.onFinishCallback.call(this.thisArg);\u000a    }\u000a    this.state = 0;\u000a  };\u000a\u000a  function Map() {\u000a    this._data = {};\u000a  }\u000a\u000a  Map.prototype.get = function (key) {\u000a    return this._data[key + "~"];\u000a  };\u000a  Map.prototype.set = function (key, value) {\u000a    this._data[key + "~"] = value;\u000a  };\u000a  Map.prototype["delete"] = function (key) {\u000a    delete this._data[key + "~"];\u000a  };\u000a\u000a  function EventTarget() {\u000a    this._listeners = new Map();\u000a  }\u000a\u000a  function throwError(e) {\u000a    setTimeout(function () {\u000a      throw e;\u000a    }, 0);\u000a  }\u000a\u000a  EventTarget.prototype.dispatchEvent = function (event) {\u000a    event.target = this;\u000a    var type = event.type.toString();\u000a    var listeners = this._listeners;\u000a    var typeListeners = listeners.get(type);\u000a    if (typeListeners == undefined) {\u000a      return;\u000a    }\u000a    var length = typeListeners.length;\u000a    var listener = undefined;\u000a    for (var i = 0; i < length; i += 1) {\u000a      listener = typeListeners[i];\u000a      try {\u000a        if (typeof listener.handleEvent === "function") {\u000a          listener.handleEvent(event);\u000a        } else {\u000a          listener.call(this, event);\u000a        }\u000a      } catch (e) {\u000a        throwError(e);\u000a      }\u000a    }\u000a  };\u000a  EventTarget.prototype.addEventListener = function (type, callback) {\u000a    type = type.toString();\u000a    var listeners = this._listeners;\u000a    var typeListeners = listeners.get(type);\u000a    if (typeListeners == undefined) {\u000a      typeListeners = [];\u000a      listeners.set(type, typeListeners);\u000a    }\u000a    for (var i = typeListeners.length; i >= 0; i -= 1) {\u000a      if (typeListeners[i] === callback) {\u000a        return;\u000a      }\u000a    }\u000a    typeListeners.push(callback);\u000a  };\u000a  EventTarget.prototype.removeEventListener = function (type, callback) {\u000a    type = type.toString();\u000a    var listeners = this._listeners;\u000a    var typeListeners = listeners.get(type);\u000a    if (typeListeners == undefined) {\u000a      return;\u000a    }\u000a    var length = typeListeners.length;\u000a    var filtered = [];\u000a    for (var i = 0; i < length; i += 1) {\u000a      if (typeListeners[i] !== callback) {\u000a        filtered.push(typeListeners[i]);\u000a      }\u000a    }\u000a    if (filtered.length === 0) {\u000a      listeners["delete"](type);\u000a    } else {\u000a      listeners.set(type, filtered);\u000a    }\u000a  };\u000a\u000a  function Event(type) {\u000a    this.type = type;\u000a    this.target = undefined;\u000a  }\u000a\u000a  function MessageEvent(type, options) {\u000a    Event.call(this, type);\u000a    this.data = options.data;\u000a    this.lastEventId = options.lastEventId;\u000a  }\u000a\u000a  MessageEvent.prototype = Event.prototype;\u000a\u000a  var XHR = global.XMLHttpRequest;\u000a  var XDR = global.XDomainRequest;\u000a  var isCORSSupported = XHR != undefined && new XHR().withCredentials != undefined;\u000a  var Transport = isCORSSupported || XHR != undefined && XDR == undefined ? XHR : XDR;\u000a\u000a  var WAITING = -1;\u000a  var CONNECTING = 0;\u000a  var OPEN = 1;\u000a  var CLOSED = 2;\u000a  var AFTER_CR = 3;\u000a  var FIELD_START = 4;\u000a  var FIELD = 5;\u000a  var VALUE_START = 6;\u000a  var VALUE = 7;\u000a  var contentTypeRegExp = /^text\u005c/event\u005c-stream;?(\u005cs*charset\u005c=utf\u005c-8)?$/i;\u000a\u000a  var MINIMUM_DURATION = 1000;\u000a  var MAXIMUM_DURATION = 18000000;\u000a\u000a  var getDuration = function (value, def) {\u000a    var n = value;\u000a    if (n !== n) {\u000a      n = def;\u000a    }\u000a    return n < MINIMUM_DURATION ? MINIMUM_DURATION : n > MAXIMUM_DURATION ? MAXIMUM_DURATION : n;\u000a  };\u000a\u000a  var fire = function (that, f, event) {\u000a    try {\u000a      if (typeof f === "function") {\u000a        f.call(that, event);\u000a      }\u000a    } catch (e) {\u000a      throwError(e);\u000a    }\u000a  };\u000a\u000a  function EventSource(url, options) {\u000a    EventTarget.call(this);\u000a\u000a    this.onopen = undefined;\u000a    this.onmessage = undefined;\u000a    this.onerror = undefined;\u000a\u000a    this.url = "";\u000a    this.readyState = CONNECTING;\u000a    this.withCredentials = false;\u000a\u000a    this._internal = new EventSourceInternal(this, url, options);\u000a  }\u000a\u000a  function EventSourceInternal(es, url, options) {\u000a    this.url = url.toString();\u000a    this.readyState = CONNECTING;\u000a    this.withCredentials = isCORSSupported && options != undefined && Boolean(options.withCredentials);\u000a\u000a    this.es = es;\u000a    this.initialRetry = getDuration(1000, 0);\u000a    this.heartbeatTimeout = getDuration(45000, 0);\u000a\u000a    this.lastEventId = "";\u000a    this.retry = this.initialRetry;\u000a    this.wasActivity = false;\u000a    var CurrentTransport = options != undefined && options.Transport != undefined ? options.Transport : Transport;\u000a    var xhr = new CurrentTransport();\u000a    this.transport = new XHRTransport(xhr, this.onStart, this.onProgress, this.onFinish, this);\u000a    this.timeout = 0;\u000a    this.currentState = WAITING;\u000a    this.dataBuffer = [];\u000a    this.lastEventIdBuffer = "";\u000a    this.eventTypeBuffer = "";\u000a\u000a    this.state = FIELD_START;\u000a    this.fieldStart = 0;\u000a    this.valueStart = 0;\u000a\u000a    this.es.url = this.url;\u000a    this.es.readyState = this.readyState;\u000a    this.es.withCredentials = this.withCredentials;\u000a\u000a    this.onTimeout();\u000a  }\u000a\u000a  EventSourceInternal.prototype.onStart = function (status, statusText, contentType) {\u000a    if (this.currentState === CONNECTING) {\u000a      if (contentType == undefined) {\u000a        contentType = "";\u000a      }\u000a      if (status === 200 && contentTypeRegExp.test(contentType)) {\u000a        this.currentState = OPEN;\u000a        this.wasActivity = true;\u000a        this.retry = this.initialRetry;\u000a        this.readyState = OPEN;\u000a        this.es.readyState = OPEN;\u000a        var event = new Event("open");\u000a        this.es.dispatchEvent(event);\u000a        fire(this.es, this.es.onopen, event);\u000a      } else if (status !== 0) {\u000a        var message = "";\u000a        if (status !== 200) {\u000a          message = "EventSource's response has a status " + status + " " + statusText.replace(/\u005cs+/g, " ") + " that is not 200. Aborting the connection.";\u000a        } else {\u000a          message = "EventSource's response has a Content-Type specifying an unsupported type: " + contentType.replace(/\u005cs+/g, " ") + ". Aborting the connection.";\u000a        }\u000a        throwError(new Error(message));\u000a        this.close();\u000a        var event = new Event("error");\u000a        this.es.dispatchEvent(event);\u000a        fire(this.es, this.es.onerror, event);\u000a      }\u000a    }\u000a  };\u000a\u000a  EventSourceInternal.prototype.onProgress = function (chunk) {\u000a    if (this.currentState === OPEN) {\u000a      var length = chunk.length;\u000a      if (length !== 0) {\u000a        this.wasActivity = true;\u000a      }\u000a      for (var position = 0; position < length; position += 1) {\u000a        var c = chunk.charCodeAt(position);\u000a        if (this.state === AFTER_CR && c === "\u005cn".charCodeAt(0)) {\u000a          this.state = FIELD_START;\u000a        } else {\u000a          if (this.state === AFTER_CR) {\u000a            this.state = FIELD_START;\u000a          }\u000a          if (c === "\u005cr".charCodeAt(0) || c === "\u005cn".charCodeAt(0)) {\u000a            if (this.state !== FIELD_START) {\u000a              if (this.state === FIELD) {\u000a                this.valueStart = position + 1;\u000a              }\u000a              var field = chunk.slice(this.fieldStart, this.valueStart - 1);\u000a              var value = chunk.slice(this.valueStart + (this.valueStart < position && chunk.charCodeAt(this.valueStart) === " ".charCodeAt(0) ? 1 : 0), position);\u000a              if (field === "data") {\u000a                this.dataBuffer.push(value);\u000a              } else if (field === "id") {\u000a                this.lastEventIdBuffer = value;\u000a              } else if (field === "event") {\u000a                this.eventTypeBuffer = value;\u000a              } else if (field === "retry") {\u000a                this.initialRetry = getDuration(Number(value), this.initialRetry);\u000a                this.retry = this.initialRetry;\u000a              } else if (field === "heartbeatTimeout") {\u000a                this.heartbeatTimeout = getDuration(Number(value), this.heartbeatTimeout);\u000a                if (this.timeout !== 0) {\u000a                  clearTimeout(this.timeout);\u000a                  var that = this;\u000a                  this.timeout = setTimeout(function () {\u000a                    that.onTimeout();\u000a                  }, this.heartbeatTimeout);\u000a                }\u000a              }\u000a            }\u000a            if (this.state === FIELD_START) {\u000a              if (this.dataBuffer.length !== 0) {\u000a                this.lastEventId = this.lastEventIdBuffer;\u000a                if (this.eventTypeBuffer === "") {\u000a                  this.eventTypeBuffer = "message";\u000a                }\u000a                var event = new MessageEvent(this.eventTypeBuffer, {\u000a                  data: this.dataBuffer.join("\u005cn"),\u000a                  lastEventId: this.lastEventIdBuffer\u000a                });\u000a                this.es.dispatchEvent(event);\u000a                if (this.eventTypeBuffer === "message") {\u000a                  fire(this.es, this.es.onmessage, event);\u000a                }\u000a                if (this.currentState === CLOSED) {\u000a                  return;\u000a                }\u000a              }\u000a              this.dataBuffer.length = 0;\u000a              this.eventTypeBuffer = "";\u000a            }\u000a            this.state = c === "\u005cr".charCodeAt(0) ? AFTER_CR : FIELD_START;\u000a          } else {\u000a            if (this.state === FIELD_START) {\u000a              this.fieldStart = position;\u000a              this.state = FIELD;\u000a            }\u000a            if (this.state === FIELD) {\u000a              if (c === ":".charCodeAt(0)) {\u000a                this.valueStart = position + 1;\u000a                this.state = VALUE_START;\u000a              }\u000a            } else if (this.state === VALUE_START) {\u000a              this.state = VALUE;\u000a            }\u000a          }\u000a        }\u000a      }\u000a    }\u000a  };\u000a\u000a  EventSourceInternal.prototype.onFinish = function () {\u000a    if (this.currentState === OPEN || this.currentState === CONNECTING) {\u000a      this.currentState = WAITING;\u000a      if (this.timeout !== 0) {\u000a        clearTimeout(this.timeout);\u000a        this.timeout = 0;\u000a      }\u000a      if (this.retry > this.initialRetry * 16) {\u000a        this.retry = this.initialRetry * 16;\u000a      }\u000a      if (this.retry > MAXIMUM_DURATION) {\u000a        this.retry = MAXIMUM_DURATION;\u000a      }\u000a      var that = this;\u000a      this.timeout = setTimeout(function () {\u000a        that.onTimeout();\u000a      }, this.retry);\u000a      this.retry = this.retry * 2 + 1;\u000a\u000a      this.readyState = CONNECTING;\u000a      this.es.readyState = CONNECTING;\u000a      var event = new Event("error");\u000a      this.es.dispatchEvent(event);\u000a      fire(this.es, this.es.onerror, event);\u000a    }\u000a  };\u000a\u000a  EventSourceInternal.prototype.onTimeout = function () {\u000a    this.timeout = 0;\u000a    if (this.currentState !== WAITING) {\u000a      if (!this.wasActivity) {\u000a        throwError(new Error("No activity within " + this.heartbeatTimeout + " milliseconds. Reconnecting."));\u000a        this.transport.cancel();\u000a      } else {\u000a        this.wasActivity = false;\u000a        var that = this;\u000a        this.timeout = setTimeout(function () {\u000a          that.onTimeout();\u000a        }, this.heartbeatTimeout);\u000a      }\u000a      return;\u000a    }\u000a\u000a    this.wasActivity = false;\u000a    var that = this;\u000a    this.timeout = setTimeout(function () {\u000a      that.onTimeout();\u000a    }, this.heartbeatTimeout);\u000a\u000a    this.currentState = CONNECTING;\u000a    this.dataBuffer.length = 0;\u000a    this.eventTypeBuffer = "";\u000a    this.lastEventIdBuffer = this.lastEventId;\u000a    this.fieldStart = 0;\u000a    this.valueStart = 0;\u000a    this.state = FIELD_START;\u000a\u000a    var s = this.url.slice(0, 5);\u000a    if (s !== "data:" && s !== "blob:") {\u000a      s = this.url + ((this.url.indexOf("?", 0) === -1 ? "?" : "&") + "lastEventId=" + encodeURIComponent(this.lastEventId) + "&r=" + (Math.random() + 1).toString().slice(2));\u000a    } else {\u000a      s = this.url;\u000a    }\u000a    try {\u000a      this.transport.open(s, this.withCredentials);\u000a    } catch (error) {\u000a      this.close();\u000a      throw error;\u000a    }\u000a  };\u000a\u000a  EventSourceInternal.prototype.close = function () {\u000a    this.currentState = CLOSED;\u000a    this.transport.cancel();\u000a    if (this.timeout !== 0) {\u000a      clearTimeout(this.timeout);\u000a      this.timeout = 0;\u000a    }\u000a    this.readyState = CLOSED;\u000a    this.es.readyState = CLOSED;\u000a  };\u000a\u000a  function F() {\u000a    this.CONNECTING = CONNECTING;\u000a    this.OPEN = OPEN;\u000a    this.CLOSED = CLOSED;\u000a  }\u000a  F.prototype = EventTarget.prototype;\u000a\u000a  EventSource.prototype = new F();\u000a\u000a  EventSource.prototype.close = function () {\u000a    this._internal.close();\u000a  };\u000a\u000a  F.call(EventSource);\u000a  if (isCORSSupported) {\u000a    EventSource.prototype.withCredentials = undefined;\u000a  }\u000a\u000a  var isEventSourceSupported = function () {\u000a    // Opera 12 fails this test, but this is fine.\u000a    return global.EventSource != undefined && "withCredentials" in global.EventSource.prototype;\u000a  };\u000a\u000a  if (Transport != undefined && (global.EventSource == undefined || isCORSSupported && !isEventSourceSupported())) {\u000a    // Why replace a native EventSource ?\u000a    // https://bugzilla.mozilla.org/show_bug.cgi?id=444328\u000a    // https://bugzilla.mozilla.org/show_bug.cgi?id=831392\u000a    // https://code.google.com/p/chromium/issues/detail?id=260144\u000a    // https://code.google.com/p/chromium/issues/detail?id=225654\u000a    // ...\u000a    global.NativeEventSource = global.EventSource;\u000a    global.EventSource = EventSource;\u000a  }\u000a})(typeof window !== 'undefined' ? window : this);\u000a\u000a
p1
.