Vconst SPEED_SCALE = 5.0,\u000a      SEP_SCALE = { m: 0.14, b: 15.0 };\u000a\u000a// Set up Map and base layers\u000avar map_providers = ONLOAD_PARAMS.map_providers,\u000a    baseLayers = { "None": L.tileLayer("") },\u000a    default_baseLayer = baseLayers["None"],\u000a    HeatLayer = false,\u000a    FlowLayer = false,\u000a    DotLayer = false,\u000a    appState = {\u000a    baseLayers: map_providers,\u000a    paused: ONLOAD_PARAMS.start_paused,\u000a    items: {}\u000a};\u000a\u000aif (!OFFLINE) {\u000a    var online_baseLayers = {\u000a        "Esri.WorldImagery": L.tileLayer.provider("Esri.WorldImagery"),\u000a        "Stamen.Terrain": L.tileLayer.provider("Stamen.Terrain"),\u000a        "Google.Roadmap": L.gridLayer.googleMutant({ type: 'roadmap' }),\u000a        "Google.Terrain": L.gridLayer.googleMutant({ type: 'terrain' }),\u000a        "Google.Hybrid": L.gridLayer.googleMutant({ type: 'hybrid' })\u000a    };\u000a\u000a    Object.assign(baseLayers, online_baseLayers);\u000a    if (map_providers.length) {\u000a        for (var i = 0; i < map_providers.length; i++) {\u000a            provider = map_providers[i];\u000a            var tl = L.tileLayer.provider(provider);\u000a            baseLayers[provider] = tl;\u000a            if (i == 0) default_baseLayer = tl;\u000a        }\u000a    } else {\u000a        default_baseLayer = baseLayers["Stamen.Terrain"];\u000a    }\u000a}\u000a\u000avar map = L.map('map', {\u000a    center: ONLOAD_PARAMS.map_center,\u000a    zoom: ONLOAD_PARAMS.map_zoom,\u000a    layers: [default_baseLayer],\u000a    preferCanvas: true,\u000a    // renderer: L.svg({ padding: 0 }),\u000a    zoomAnimation: false\u000a});\u000a\u000avar sidebarControl = L.control.sidebar('sidebar').addTo(map),\u000a    zoomControl = map.zoomControl.setPosition('bottomright'),\u000a    layerControl = L.control.layers(baseLayers, null, { position: 'topleft' }).addTo(map),\u000a\u000a// locateControl = L.control.locate({position: "bottomright", icon: "fa fa-anchor"}).addTo(map),\u000afps_display = null;\u000a\u000aif (ADMIN) {\u000a    fps_display = L.control.fps().addTo(map);\u000a}\u000a\u000a// Animation button\u000avar animation_button_states = [{\u000a    stateName: 'animation-running',\u000a    icon: 'fa-pause',\u000a    title: 'Pause Animation',\u000a    onClick: function (btn, map) {\u000a        pauseFlow();\u000a        updateState();\u000a        btn.state('animation-paused');\u000a    }\u000a}, {\u000a    stateName: 'animation-paused',\u000a    icon: 'fa-play',\u000a    title: 'Resume Animation',\u000a    onClick: function (btn, map) {\u000a        resumeFlow();\u000a        if (DotLayer) {\u000a            DotLayer.animate();\u000a        }\u000a        updateState();\u000a        btn.state('animation-running');\u000a    }\u000a}];\u000a\u000avar animationControl = L.easyButton({\u000a    states: appState.paused ? animation_button_states.reverse() : animation_button_states\u000a}).addTo(map);\u000a\u000a// Capture button\u000avar capture_button_states = [{\u000a    stateName: 'not-capturing',\u000a    icon: 'fa-video-camera',\u000a    title: 'Capture',\u000a    onClick: function (btn, map) {\u000a        if (!DotLayer) {\u000a            return;\u000a        }\u000a        btn.state('capturing');\u000a        timeout = DotLayer.startCapture();\u000a        setTimeout(function () {\u000a            btn.state('not-capturing');\u000a        }, timeout + 500);\u000a    }\u000a}, {\u000a    stateName: 'capturing',\u000a    icon: 'fa-stop',\u000a    title: 'Stop capturing',\u000a    onClick: function (btn, map) {\u000a        if (DotLayer && DotLayer._capturing) {\u000a            DotLayer.stopCapture();\u000a            btn.state('not-capturing');\u000a        }\u000a    }\u000a}];\u000a\u000avar captureControl = L.easyButton({\u000a    states: capture_button_states\u000a}).addTo(map);\u000a\u000a// set up dial-controls\u000a$(".dotconst-dial").knob({\u000a    min: 0,\u000a    max: 100,\u000a    step: 0.1,\u000a    width: "150",\u000a    height: "150",\u000a    cursor: 20,\u000a    inline: true,\u000a    // displayInput: false,\u000a    change: function (val) {\u000a        if (!DotLayer) {\u000a            return;\u000a        }\u000a\u000a        let newVal;\u000a        if (this.$[0].id == "sepConst") {\u000a            newVal = Math.pow(2, val * SEP_SCALE.m + SEP_SCALE.b);\u000a            DotLayer.C1 = newVal;\u000a        } else {\u000a            newVal = val * val * SPEED_SCALE;\u000a            DotLayer.C2 = newVal;\u000a        }\u000a        $(".periodDisplay").html(DotLayer.periodInSecs().toFixed(2));\u000a    }\u000a});\u000a\u000aif (FLASH_MESSAGES.length > 0) {\u000a    var msg = "<ul class=flashes>";\u000a    for (let i = 0, len = FLASH_MESSAGES.length; i < len; i++) {\u000a        msg += "<li>" + FLASH_MESSAGES[i] + "</li>";\u000a    }\u000a    msg += "</ul>";\u000a    L.control.window(map, { content: msg, visible: true });\u000a}\u000a\u000avar atable = $('#activitiesList').DataTable({\u000a    paging: false,\u000a    scrollY: "60vh",\u000a    scrollX: true,\u000a    scrollCollapse: true,\u000a    order: [[0, "desc"]],\u000a    select: true,\u000a    data: Object.values(appState.items),\u000a    idSrc: "id",\u000a    columns: [{ title: "Date", data: null, render: A => href(stravaActivityURL(A.id), A.beginTimestamp.slice(0, 10)) }, { title: "Type", data: "type" }, { title: `Dist (${DIST_LABEL})`, data: "total_distance", render: data => +(data / DIST_UNIT).toFixed(2) }, { title: "Time", data: "elapsed_time", render: hhmmss }, { title: "Name", data: "name" }]\u000a}).on('select', handle_table_selections).on('deselect', handle_table_selections);\u000a\u000afunction updateShareStatus(status) {\u000a    console.log("updating share status.");\u000a    url = `${SHARE_STATUS_UPDATE_URL}?status=${status}`;\u000a    httpGetAsync(url, function (responseText) {\u000a        console.log(`response: ${responseText}`);\u000a    });\u000a}\u000a\u000afunction handle_table_selections(e, dt, type, indexes) {\u000a    if (type === 'row') {\u000a        var selectedItems = atable.rows({ selected: true }).data(),\u000a            unselectedItems = atable.rows({ selected: false }).data();\u000a\u000a        for (var i = 0; i < selectedItems.length; i++) {\u000a            if (!selectedItems[i].selected) {\u000a                togglePathSelect(selectedItems[i].id);\u000a            }\u000a        }\u000a\u000a        for (var i = 0; i < unselectedItems.length; i++) {\u000a            if (unselectedItems[i].selected) {\u000a                togglePathSelect(unselectedItems[i].id);\u000a            }\u000a        }\u000a\u000a        let c = map.getCenter(),\u000a            z = map.getZoom();\u000a\u000a        if ($("#zoom-table-selection").is(':checked')) {\u000a            zoomToSelected();\u000a        }\u000a\u000a        // If map didn't move then force a redraw\u000a        let c2 = map.getCenter();\u000a        if (DotLayer && c.x == c2.x && c.y == c2.y && z == map.getZoom()) {\u000a            DotLayer._onLayerDidMove();\u000a        }\u000a    }\u000a}\u000a\u000afunction zoomToSelected() {\u000a    // Pan-Zoom to fit all selected activities\u000a    var selection_bounds = L.latLngBounds();\u000a    $.each(appState.items, (id, a) => {\u000a        if (a.selected) {\u000a            selection_bounds.extend(a.bounds);\u000a        }\u000a    });\u000a    if (selection_bounds.isValid()) {\u000a        map.fitBounds(selection_bounds);\u000a    }\u000a}\u000a\u000afunction selectedIDs() {\u000a    return Object.values(appState.items).filter(a => {\u000a        return a.selected;\u000a    }).map(function (a) {\u000a        return a.id;\u000a    });\u000a}\u000a\u000afunction openSelected() {\u000a    ids = selectedIDs();\u000a    if (ids.length > 0) {\u000a        var url = BASE_USER_URL + "?id=" + ids.join("+");\u000a        if (appState.paused == true) {\u000a            url += "&paused=1";\u000a        }\u000a        window.open(url, '_blank');\u000a    }\u000a}\u000a\u000afunction pauseFlow() {\u000a    DotLayer.pause();\u000a    appState.paused = true;\u000a}\u000a\u000afunction resumeFlow() {\u000a    appState.paused = false;\u000a    if (DotLayer) {\u000a        DotLayer.animate();\u000a    }\u000a}\u000a\u000afunction highlightPath(id) {\u000a    var A = appState.items[id];\u000a    if (A.selected) return false;\u000a\u000a    A.highlighted = true;\u000a\u000a    var row = $("#" + id),\u000a        scroller = $('.dataTables_scrollBody'),\u000a        flow = A.flowLayer;\u000a\u000a    // highlight table row and scroll to it if necessary\u000a    row.addClass('selected');\u000a    scroller.scrollTop(row.prop('offsetTop') - scroller.height() / 2);\u000a\u000a    return A;\u000a}\u000a\u000afunction unhighlightPath(id) {\u000a\u000a    var A = appState.items[id];\u000a    if (A.selected) return false;\u000a\u000a    A.highlighted = false;\u000a\u000a    // un-highlight table row\u000a    $("#" + id).removeClass('selected');\u000a\u000a    return A;\u000a}\u000a\u000afunction togglePathSelect(id) {\u000a    var A = appState.items[id];\u000a    if (A.selected) {\u000a        A.selected = false;\u000a        unhighlightPath(id);\u000a    } else {\u000a        highlightPath(id);\u000a        A.selected = true;\u000a    }\u000a}\u000a\u000afunction activityDataPopup(id, latlng) {\u000a    var A = appState.items[id],\u000a        d = parseFloat(A.total_distance),\u000a        elapsed = hhmmss(parseFloat(A.elapsed_time)),\u000a        v = parseFloat(A.average_speed);\u000a    var dkm = +(d / 1000).toFixed(2),\u000a        dmi = +(d / 1609.34).toFixed(2),\u000a        vkm,\u000a        vmi;\u000a\u000a    if (A.vtype == "pace") {\u000a        vkm = hhmmss(1000 / v).slice(3) + "/km";\u000a        vmi = hhmmss(1609.34 / v).slice(3) + "/mi";\u000a    } else {\u000a        vkm = (v * 3600 / 1000).toFixed(2) + "km/hr";\u000a        vmi = (v * 3600 / 1609.34).toFixed(2) + "mi/hr";\u000a    }\u000a\u000a    var popup = L.popup().setLatLng(latlng).setContent(`${A.name}<br>${A.type}: ${A.beginTimestamp}<br>` + `${dkm} km (${dmi} mi) in ${elapsed}<br>${vkm} (${vmi})<br>` + `View in <a href='https://www.strava.com/activities/${A.id}' target='_blank'>Strava</a>` + `, <a href='${BASE_USER_URL}?id=${A.id}&flowres=high' target='_blank'>Heatflask</a>`).openOn(map);\u000a}\u000a\u000a/* Rendering */\u000afunction renderLayers() {\u000a    const flowres = $("#flowres").val(),\u000a          heatres = $("#heatres").val(),\u000a          date1 = $("#date1").val(),\u000a          date2 = $("#date2").val(),\u000a          type = $("#select_type").val(),\u000a          num = $("#select_num").val(),\u000a          lores = flowres == "low" || heatres == "low",\u000a          hires = flowres == "high" || heatres == "high";\u000a    dotFlow = true;\u000a\u000a    var query = {};\u000a\u000a    if (type == "activity_ids") {\u000a        query.id = $("#activity_ids").val();\u000a    } else if (type == "activities") {\u000a        if (num == 0) {\u000a            query.limit = 1;\u000a        } else {\u000a            query.limit = num;\u000a        }\u000a    } else {\u000a        if (date1) {\u000a            query.date1 = date1;\u000a        }\u000a        if (date2 && date2 != "now") {\u000a            query.date2 = date2;\u000a        }\u000a    }\u000a\u000a    if (hires) {\u000a        query.hires = hires;\u000a    }\u000a\u000a    // Remove HeatLayer from map and control if it's there\u000a    if (HeatLayer) {\u000a        map.removeLayer(HeatLayer);\u000a        layerControl.removeLayer(HeatLayer);\u000a        HeatLayer = false;\u000a    }\u000a\u000a    if (DotLayer) {\u000a        map.removeLayer(DotLayer);\u000a        layerControl.removeLayer(DotLayer);\u000a        DotLayer = false;\u000a    }\u000a\u000a    // Add new blank HeatLayer to map if specified\u000a    var latlngs_flat = [];\u000a    if (heatres) {\u000a        HeatLayer = L.heatLayer(latlngs_flat, HEATLAYER_DEFAULT_OPTIONS);\u000a        map.addLayer(HeatLayer);\u000a        layerControl.addOverlay(HeatLayer, "Point Density");\u000a    }\u000a\u000a    // locateControl.stop();\u000a    // appState.items = {};\u000a\u000a    // We will load in new items that aren't already in appState.items,\u000a    //  and delete whatever is left.\u000a    var toDelete = new Set(Object.keys(appState.items));\u000a\u000a    atable.clear();\u000a\u000a    var msgBox = L.control.window(map, { position: 'top',\u000a        content: "<div class='data_message'></div><div><progress class='progbar' id='box'></progress></div>",\u000a        visible: true\u000a    }),\u000a        progress_bars = $('.progbar'),\u000a        rendering = true,\u000a        listening = true,\u000a        bounds = L.latLngBounds(),\u000a        source = new EventSource(BASE_DATAURL + "?" + jQuery.param(query, true));\u000a\u000a    $(".data_message").html("Rendering activities...");\u000a    $("#abortButton").show();\u000a    $(".progbar").show();\u000a    $('#renderButton').prop('disabled', true);\u000a\u000a    function doneRendering(msg) {\u000a        if (rendering) {\u000a            $("#abortButton").hide();\u000a            $(".progbar").hide();\u000a            try {\u000a                msgBox.close();\u000a            } catch (err) {\u000a                console.log(err.message);\u000a            }\u000a            if ($("#autozoom:checked").val() && bounds.isValid()) map.fitBounds(bounds);\u000a            var msg2 = msg + " " + Object.keys(appState.items).length + " activities rendered.";\u000a            $(".data_message").html(msg2);\u000a            rendering = false;\u000a            if (dotFlow) {\u000a                DotLayer = new L.DotLayer(appState.items, { startPaused: appState.paused });\u000a                map.addLayer(DotLayer);\u000a                layerControl.addOverlay(DotLayer, "Dots");\u000a\u000a                $("#sepConst").val((Math.log2(DotLayer.C1) - SEP_SCALE.b) / SEP_SCALE.m).trigger("change");\u000a                $("#speedConst").val(Math.sqrt(DotLayer.C2) / SPEED_SCALE).trigger("change");\u000a                setTimeout(function () {\u000a                    $(".periodDisplay").html(DotLayer.periodInSecs().toFixed(2));\u000a                }, 1000);\u000a\u000a                $("#showPaths").prop("checked", DotLayer.options.showPaths).on("change", function () {\u000a                    DotLayer.options.showPaths = $(this).prop("checked");\u000a                    DotLayer._onLayerDidMove();\u000a                });\u000a\u000a                // delete all members of toDelete from appState.items\u000a                for (let item of toDelete) {\u000a                    delete appState.items[item];\u000a                }\u000a\u000a                // render the activities table\u000a                atable.rows.add(Object.values(appState.items)).draw(false);\u000a            }\u000a        }\u000a    }\u000a\u000a    function stopListening() {\u000a        if (listening) {\u000a            listening = false;\u000a            source.close();\u000a            $('#renderButton').prop('disabled', false);\u000a        }\u000a    }\u000a\u000a    source.onmessage = function (event) {\u000a        if (event.data == 'done') {\u000a            doneRendering("Finished. ");\u000a            stopListening();\u000a            appState['date1'] = date1;\u000a            appState["date2"] = date2;\u000a            appState["flowres"] = flowres;\u000a            appState["heatres"] = heatres;\u000a\u000a            if ("limit" in query) appState["limit"] = query.limit;\u000a            updateState();\u000a        } else {\u000a            var A = JSON.parse(event.data),\u000a                heatpoints = false,\u000a                flowpoints = false;\u000a            A.selected = false;\u000a            A.bounds = L.latLngBounds();\u000a\u000a            if ("error" in A) {\u000a                var msg = "<font color='red'>" + A.error + "</font><br>";\u000a                $(".data_message").html(A.msg);\u000a                console.log(`Error activity ${A.id}: ${A.error}`);\u000a                return;\u000a            } else if ("stop_rendering" in A) {\u000a                doneRendering("Done rendering.");\u000a            } else if ("msg" in A) {\u000a                $(".data_message").html(A.msg);\u000a                if ("value" in A) {\u000a                    progress_bars.val(A.value);\u000a                }\u000a                return;\u000a            } else {\u000a                let alreadyIn = toDelete.delete(A.id.toString());\u000a\u000a                // if A is already in appState.items then we can stop now\u000a                if (!heatres && alreadyIn) {\u000a                    return;\u000a                }\u000a            }\u000a\u000a            if (lores && "summary_polyline" in A && A.summary_polyline) {\u000a                let latlngs = L.PolylineUtil.decode(A.summary_polyline);\u000a                if (heatres == "low") heatpoints = latlngs;\u000a                // if (flowres == "low") flowpoints = latlngs;\u000a            }\u000a\u000a            if (query.hires && "polyline" in A && A.polyline) {\u000a                let latLngArray = L.PolylineUtil.decode(A.polyline);\u000a\u000a                if (heatres == "high") heatpoints = latLngArray;\u000a\u000a                if (flowres == "high" && "time" in A) {\u000a                    let len = latLngArray.length,\u000a                        time = streamDecode(A.time),\u000a                        latLngTime = new Float32Array(3 * len);\u000a\u000a                    for (let i = 0, ll; i < len; i++) {\u000a                        ll = latLngArray[i];\u000a\u000a                        A.bounds.extend(ll);\u000a                        idx = i * 3;\u000a                        latLngTime[idx] = ll[0];\u000a                        latLngTime[idx + 1] = ll[1];\u000a                        latLngTime[idx + 2] = time[i];\u000a                    }\u000a\u000a                    A.latLngTime = latLngTime;\u000a                    flowpoints = latLngTime;\u000a                }\u000a            }\u000a\u000a            if (heatpoints) {\u000a                latlngs_flat.push.apply(latlngs_flat, heatpoints);\u000a            }\u000a\u000a            if (heatpoints || flowpoints) {\u000a                A.startTime = moment(A.ts_UTC || A.beginTimestamp).valueOf();\u000a\u000a                bounds.extend(A.bounds);\u000a                delete A.summary_polyline;\u000a                delete A.polyline;\u000a                delete A.time;\u000a\u000a                // only add A to appState.items if it isn't already there\u000a                if (!(A.id in appState.items)) {\u000a                    appState.items[A.id] = A;\u000a                }\u000a            }\u000a        }\u000a    };\u000a}\u000a\u000afunction updateState() {\u000a    var params = {},\u000a        type = $("#select_type").val(),\u000a        num = $("#select_num").val();\u000a\u000a    if (type == "activities") {\u000a        params.limit = num;\u000a    } else if (type == "activity_ids") {\u000a        params.id = $("#activity_ids").val();\u000a    } else if (type == "days") {\u000a        params.preset = num;\u000a    } else {\u000a        if (appState.date1) {\u000a            params.date1 = appState.date1;\u000a        }\u000a        if (appState.date2 && appState.date2 != "now") {\u000a            params.date2 = appState.date2;\u000a        }\u000a    }\u000a\u000a    if (appState.paused) {\u000a        params.paused = "1";\u000a    }\u000a\u000a    if ($("#info").is(':checked')) {\u000a        appState.info = true;\u000a        params.info = "1";\u000a    }\u000a\u000a    if ($("#autozoom").is(':checked')) {\u000a        appState.autozoom = true;\u000a        params.autozoom = "1";\u000a    } else {\u000a        appState.autozoom = false;\u000a        var zoom = map.getZoom(),\u000a            center = map.getCenter(),\u000a            precision = Math.max(0, Math.ceil(Math.log(zoom) / Math.LN2));\u000a        params.lat = center.lat.toFixed(precision);\u000a        params.lng = center.lng.toFixed(precision);\u000a        params.zoom = zoom;\u000a    }\u000a\u000a    if ($("#heatres").val()) {\u000a        params.heatres = $("#heatres").val();\u000a    }\u000a\u000a    if ($("#flowres").val()) {\u000a        params.flowres = $("#flowres").val();\u000a    }\u000a\u000a    params["baselayer"] = appState.baseLayers;\u000a\u000a    var newURL = USER_ID + "?" + jQuery.param(params, true);\u000a    window.history.pushState("", "", newURL);\u000a\u000a    $(".current-url").val(newURL);\u000a}\u000a\u000afunction preset_sync() {\u000a    var F = "YYYY-MM-DD",\u000a        num = $("#select_num").val(),\u000a        type = $("#select_type").val();\u000a\u000a    $('#query_type').text(type);\u000a    if (type == "days") {\u000a        $(".date_select").hide();\u000a        $("#id_select").hide();\u000a        $("#num_select").show();\u000a        $('#date1').val(moment().subtract(num, 'days').format(F));\u000a        $('#date2').val("now");\u000a    } else if (type == "activities") {\u000a        $(".date_select").hide();\u000a        $("#id_select").hide();\u000a        $("#num_select").show();\u000a        $('#date1').val("");\u000a        $('#date2').val("now");\u000a    } else if (type == "activity_ids") {\u000a        $(".date_select").hide();\u000a        $("#num_select").hide();\u000a        $("#id_select").show();\u000a    } else {\u000a        $(".date_select").show();\u000a        $("#select_num").val("");\u000a        $("#num_select").hide();\u000a        $("#id_select").hide();\u000a    }\u000a}\u000a\u000a$(document).ready(function () {\u000a    $("#select_num").keypress(function (event) {\u000a        if (event.which == 13) {\u000a            event.preventDefault();\u000a            renderLayers();\u000a        }\u000a    });\u000a\u000a    $("#abortButton").hide();\u000a    $('#abortButton').click(function () {\u000a        stopListening();\u000a        doneRendering("<font color='red'>Aborted:</font>");\u000a    });\u000a\u000a    $(".progbar").hide();\u000a    $(".datepick").datepicker({ dateFormat: 'yy-mm-dd',\u000a        changeMonth: true,\u000a        changeYear: true\u000a    });\u000a\u000a    map.on('moveend', function (e) {\u000a        if (!appState.autozoom) {\u000a            updateState();\u000a        }\u000a    });\u000a\u000a    $("#autozoom").on("change", updateState);\u000a    $("#info").on("change", updateState);\u000a\u000a    $("#share").prop("checked", SHARE_PROFILE);\u000a    $("#share").on("change", function () {\u000a        var status = $("#share").is(":checked") ? "public" : "private";\u000a        updateShareStatus(status);\u000a    });\u000a\u000a    $("#zoom-table-selection").prop("checked", true);\u000a    $("#zoom-table-selection").on("change", function () {\u000a        if ($("#zoom-table-selection").is(':checked')) {\u000a            zoomToSelected();\u000a        }\u000a    });\u000a\u000a    $(".datepick").on("change", function () {\u000a        $(".preset").val("");\u000a    });\u000a    $(".preset").on("change", preset_sync);\u000a\u000a    $("#renderButton").click(renderLayers);\u000a    $("#render-selection-button").click(openSelected);\u000a\u000a    $("#heatres").val(ONLOAD_PARAMS.heatres);\u000a    $("#flowres").val(ONLOAD_PARAMS.flowres);\u000a    $("#autozoom").prop('checked', ONLOAD_PARAMS.autozoom);\u000a\u000a    if (ONLOAD_PARAMS.activity_ids) {\u000a        $("#activity_ids").val(ONLOAD_PARAMS.activity_ids);\u000a        $("#select_type").val("activity_ids");\u000a    } else if (ONLOAD_PARAMS.limit) {\u000a        $("#select_num").val(ONLOAD_PARAMS.limit);\u000a        $("#select_type").val("activities");\u000a    } else if (ONLOAD_PARAMS.preset) {\u000a        $("#select_num").val(ONLOAD_PARAMS.preset);\u000a        $("#select_type").val("days");\u000a        preset_sync();\u000a    } else {\u000a        $('#date1').val(ONLOAD_PARAMS.date1);\u000a        $('#date2').val(ONLOAD_PARAMS.date2);\u000a        $("#preset").val("");\u000a    }\u000a\u000a    renderLayers();\u000a    preset_sync();\u000a});\u000a\u000a
p1
.