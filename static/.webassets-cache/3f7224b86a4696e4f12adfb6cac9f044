V(function () {\u000a\u000a  // This is for grouping buttons into a bar\u000a  // takes an array of `L.easyButton`s and\u000a  // then the usual `.addTo(map)`\u000a  L.Control.EasyBar = L.Control.extend({\u000a\u000a    options: {\u000a      position: 'topleft', // part of leaflet's defaults\u000a      id: null, // an id to tag the Bar with\u000a      leafletClasses: true // use leaflet classes?\u000a    },\u000a\u000a    initialize: function (buttons, options) {\u000a\u000a      if (options) {\u000a        L.Util.setOptions(this, options);\u000a      }\u000a\u000a      this._buildContainer();\u000a      this._buttons = [];\u000a\u000a      for (var i = 0; i < buttons.length; i++) {\u000a        buttons[i]._bar = this;\u000a        buttons[i]._container = buttons[i].button;\u000a        this._buttons.push(buttons[i]);\u000a        this.container.appendChild(buttons[i].button);\u000a      }\u000a    },\u000a\u000a    _buildContainer: function () {\u000a      this._container = this.container = L.DomUtil.create('div', '');\u000a      this.options.leafletClasses && L.DomUtil.addClass(this.container, 'leaflet-bar easy-button-container leaflet-control');\u000a      this.options.id && (this.container.id = this.options.id);\u000a    },\u000a\u000a    enable: function () {\u000a      L.DomUtil.addClass(this.container, 'enabled');\u000a      L.DomUtil.removeClass(this.container, 'disabled');\u000a      this.container.setAttribute('aria-hidden', 'false');\u000a      return this;\u000a    },\u000a\u000a    disable: function () {\u000a      L.DomUtil.addClass(this.container, 'disabled');\u000a      L.DomUtil.removeClass(this.container, 'enabled');\u000a      this.container.setAttribute('aria-hidden', 'true');\u000a      return this;\u000a    },\u000a\u000a    onAdd: function () {\u000a      return this.container;\u000a    },\u000a\u000a    addTo: function (map) {\u000a      this._map = map;\u000a\u000a      for (var i = 0; i < this._buttons.length; i++) {\u000a        this._buttons[i]._map = map;\u000a      }\u000a\u000a      var container = this._container = this.onAdd(map),\u000a          pos = this.getPosition(),\u000a          corner = map._controlCorners[pos];\u000a\u000a      L.DomUtil.addClass(container, 'leaflet-control');\u000a\u000a      if (pos.indexOf('bottom') !== -1) {\u000a        corner.insertBefore(container, corner.firstChild);\u000a      } else {\u000a        corner.appendChild(container);\u000a      }\u000a\u000a      return this;\u000a    }\u000a\u000a  });\u000a\u000a  L.easyBar = function () {\u000a    var args = [L.Control.EasyBar];\u000a    for (var i = 0; i < arguments.length; i++) {\u000a      args.push(arguments[i]);\u000a    }\u000a    return new (Function.prototype.bind.apply(L.Control.EasyBar, args))();\u000a  };\u000a\u000a  // L.EasyButton is the actual buttons\u000a  // can be called without being grouped into a bar\u000a  L.Control.EasyButton = L.Control.extend({\u000a\u000a    options: {\u000a      position: 'topleft', // part of leaflet's defaults\u000a\u000a      id: null, // an id to tag the button with\u000a\u000a      type: 'replace', // [(replace|animate)]\u000a      // replace swaps out elements\u000a      // animate changes classes with all elements inserted\u000a\u000a      states: [], // state names look like this\u000a      // {\u000a      //   stateName: 'untracked',\u000a      //   onClick: function(){ handle_nav_manually(); };\u000a      //   title: 'click to make inactive',\u000a      //   icon: 'fa-circle',    // wrapped with <a>\u000a      // }\u000a\u000a      leafletClasses: true, // use leaflet styles for the button\u000a      tagName: 'button'\u000a    },\u000a\u000a    initialize: function (icon, onClick, title, id) {\u000a\u000a      // clear the states manually\u000a      this.options.states = [];\u000a\u000a      // add id to options\u000a      if (id != null) {\u000a        this.options.id = id;\u000a      }\u000a\u000a      // storage between state functions\u000a      this.storage = {};\u000a\u000a      // is the last item an object?\u000a      if (typeof arguments[arguments.length - 1] === 'object') {\u000a\u000a        // if so, it should be the options\u000a        L.Util.setOptions(this, arguments[arguments.length - 1]);\u000a      }\u000a\u000a      // if there aren't any states in options\u000a      // use the early params\u000a      if (this.options.states.length === 0 && typeof icon === 'string' && typeof onClick === 'function') {\u000a\u000a        // turn the options object into a state\u000a        this.options.states.push({\u000a          icon: icon,\u000a          onClick: onClick,\u000a          title: typeof title === 'string' ? title : ''\u000a        });\u000a      }\u000a\u000a      // curate and move user's states into\u000a      // the _states for internal use\u000a      this._states = [];\u000a\u000a      for (var i = 0; i < this.options.states.length; i++) {\u000a        this._states.push(new State(this.options.states[i], this));\u000a      }\u000a\u000a      this._buildButton();\u000a\u000a      this._activateState(this._states[0]);\u000a    },\u000a\u000a    _buildButton: function () {\u000a\u000a      this.button = L.DomUtil.create(this.options.tagName, '');\u000a\u000a      // the next three if statements should be collapsed into the options\u000a      // when it's time for breaking changes.\u000a      if (this.tagName === 'button') {\u000a        this.button.type = 'button';\u000a      }\u000a\u000a      if (this.options.id) {\u000a        this.button.id = this.options.id;\u000a      }\u000a\u000a      if (this.options.leafletClasses) {\u000a        L.DomUtil.addClass(this.button, 'easy-button-button leaflet-bar-part leaflet-interactive');\u000a      }\u000a\u000a      // don't let double clicks and mousedown get to the map\u000a      L.DomEvent.addListener(this.button, 'dblclick', L.DomEvent.stop);\u000a      L.DomEvent.addListener(this.button, 'mousedown', L.DomEvent.stop);\u000a\u000a      // take care of normal clicks\u000a      L.DomEvent.addListener(this.button, 'click', function (e) {\u000a        L.DomEvent.stop(e);\u000a        this._currentState.onClick(this, this._map ? this._map : null);\u000a        this._map.getContainer().focus();\u000a      }, this);\u000a\u000a      // prep the contents of the control\u000a      if (this.options.type == 'replace') {\u000a        this.button.appendChild(this._currentState.icon);\u000a      } else {\u000a        for (var i = 0; i < this._states.length; i++) {\u000a          this.button.appendChild(this._states[i].icon);\u000a        }\u000a      }\u000a    },\u000a\u000a    _currentState: {\u000a      // placeholder content\u000a      stateName: 'unnamed',\u000a      icon: function () {\u000a        return document.createElement('span');\u000a      }()\u000a    },\u000a\u000a    _states: null, // populated on init\u000a\u000a\u000a    state: function (newState) {\u000a\u000a      // activate by name\u000a      if (typeof newState == 'string') {\u000a\u000a        this._activateStateNamed(newState);\u000a\u000a        // activate by index\u000a      } else if (typeof newState == 'number') {\u000a\u000a        this._activateState(this._states[newState]);\u000a      }\u000a\u000a      return this;\u000a    },\u000a\u000a    _activateStateNamed: function (stateName) {\u000a      for (var i = 0; i < this._states.length; i++) {\u000a        if (this._states[i].stateName == stateName) {\u000a          this._activateState(this._states[i]);\u000a        }\u000a      }\u000a    },\u000a\u000a    _activateState: function (newState) {\u000a\u000a      if (newState === this._currentState) {\u000a\u000a        // don't touch the dom if it'll just be the same after\u000a        return;\u000a      } else {\u000a\u000a        // swap out elements... if you're into that kind of thing\u000a        if (this.options.type == 'replace') {\u000a          this.button.appendChild(newState.icon);\u000a          this.button.removeChild(this._currentState.icon);\u000a        }\u000a\u000a        if (newState.title) {\u000a          this.button.title = newState.title;\u000a        } else {\u000a          this.button.removeAttribute('title');\u000a        }\u000a\u000a        // update classes for animations\u000a        for (var i = 0; i < this._states.length; i++) {\u000a          L.DomUtil.removeClass(this._states[i].icon, this._currentState.stateName + '-active');\u000a          L.DomUtil.addClass(this._states[i].icon, newState.stateName + '-active');\u000a        }\u000a\u000a        // update classes for animations\u000a        L.DomUtil.removeClass(this.button, this._currentState.stateName + '-active');\u000a        L.DomUtil.addClass(this.button, newState.stateName + '-active');\u000a\u000a        // update the record\u000a        this._currentState = newState;\u000a      }\u000a    },\u000a\u000a    enable: function () {\u000a      L.DomUtil.addClass(this.button, 'enabled');\u000a      L.DomUtil.removeClass(this.button, 'disabled');\u000a      this.button.setAttribute('aria-hidden', 'false');\u000a      return this;\u000a    },\u000a\u000a    disable: function () {\u000a      L.DomUtil.addClass(this.button, 'disabled');\u000a      L.DomUtil.removeClass(this.button, 'enabled');\u000a      this.button.setAttribute('aria-hidden', 'true');\u000a      return this;\u000a    },\u000a\u000a    removeFrom: function (map) {\u000a\u000a      this._container.parentNode.removeChild(this._container);\u000a      this._map = null;\u000a\u000a      return this;\u000a    },\u000a\u000a    onAdd: function () {\u000a      var containerObj = L.easyBar([this], {\u000a        position: this.options.position,\u000a        leafletClasses: this.options.leafletClasses\u000a      });\u000a      this._container = containerObj.container;\u000a      return this._container;\u000a    }\u000a\u000a  });\u000a\u000a  L.easyButton = function () /* args will pass automatically */{\u000a    var args = Array.prototype.concat.apply([L.Control.EasyButton], arguments);\u000a    return new (Function.prototype.bind.apply(L.Control.EasyButton, args))();\u000a  };\u000a\u000a  /*************************\u000a   *\u000a   * util functions\u000a   *\u000a   *************************/\u000a\u000a  // constructor for states so only curated\u000a  // states end up getting called\u000a  function State(template, easyButton) {\u000a\u000a    this.title = template.title;\u000a    this.stateName = template.stateName ? template.stateName : 'unnamed-state';\u000a\u000a    // build the wrapper\u000a    this.icon = L.DomUtil.create('span', '');\u000a\u000a    L.DomUtil.addClass(this.icon, 'button-state state-' + this.stateName.replace(/(^\u005cs*|\u005cs*$)/g, ''));\u000a    this.icon.innerHTML = buildIcon(template.icon);\u000a    this.onClick = L.Util.bind(template.onClick ? template.onClick : function () {}, easyButton);\u000a  }\u000a\u000a  function buildIcon(ambiguousIconString) {\u000a\u000a    var tmpIcon;\u000a\u000a    // does this look like html? (i.e. not a class)\u000a    if (ambiguousIconString.match(/[&;=<>"']/)) {\u000a\u000a      // if so, the user should have put in html\u000a      // so move forward as such\u000a      tmpIcon = ambiguousIconString;\u000a\u000a      // then it wasn't html, so\u000a      // it's a class list, figure out what kind\u000a    } else {\u000a      ambiguousIconString = ambiguousIconString.replace(/(^\u005cs*|\u005cs*$)/g, '');\u000a      tmpIcon = L.DomUtil.create('span', '');\u000a\u000a      if (ambiguousIconString.indexOf('fa-') === 0) {\u000a        L.DomUtil.addClass(tmpIcon, 'fa ' + ambiguousIconString);\u000a      } else if (ambiguousIconString.indexOf('glyphicon-') === 0) {\u000a        L.DomUtil.addClass(tmpIcon, 'glyphicon ' + ambiguousIconString);\u000a      } else {\u000a        L.DomUtil.addClass(tmpIcon, /*rollwithit*/ambiguousIconString);\u000a      }\u000a\u000a      // make this a string so that it's easy to set innerHTML below\u000a      tmpIcon = tmpIcon.outerHTML;\u000a    }\u000a\u000a    return tmpIcon;\u000a  }\u000a})();\u000a\u000a
p1
.