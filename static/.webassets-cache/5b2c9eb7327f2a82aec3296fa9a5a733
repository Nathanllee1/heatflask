VL.AreaSelect = L.Class.extend({\u000a    includes: L.Mixin.Events,\u000a\u000a    options: {\u000a        width: 200,\u000a        height: 300,\u000a        keepAspectRatio: false\u000a    },\u000a\u000a    initialize: function (options) {\u000a        L.Util.setOptions(this, options);\u000a\u000a        this._width = this.options.width;\u000a        this._height = this.options.height;\u000a    },\u000a\u000a    addTo: function (map) {\u000a        this.map = map;\u000a        this._createElements();\u000a        this._render();\u000a        return this;\u000a    },\u000a\u000a    getBounds: function () {\u000a        var size = this.map.getSize();\u000a        var topRight = new L.Point();\u000a        var bottomLeft = new L.Point();\u000a\u000a        bottomLeft.x = Math.round((size.x - this._width) / 2);\u000a        topRight.y = Math.round((size.y - this._height) / 2);\u000a        topRight.x = size.x - bottomLeft.x;\u000a        bottomLeft.y = size.y - topRight.y;\u000a\u000a        var sw = this.map.containerPointToLatLng(bottomLeft);\u000a        var ne = this.map.containerPointToLatLng(topRight);\u000a\u000a        return new L.LatLngBounds(sw, ne);\u000a    },\u000a\u000a    remove: function () {\u000a        this.map.off("moveend", this._onMapChange);\u000a        this.map.off("zoomend", this._onMapChange);\u000a        this.map.off("resize", this._onMapResize);\u000a\u000a        this._container.parentNode.removeChild(this._container);\u000a    },\u000a\u000a    setDimensions: function (dimensions) {\u000a        if (!dimensions) return;\u000a\u000a        this._height = parseInt(dimensions.height) || this._height;\u000a        this._width = parseInt(dimensions.width) || this._width;\u000a        this._render();\u000a        this.fire("change");\u000a    },\u000a\u000a    _createElements: function () {\u000a        if (!!this._container) return;\u000a\u000a        this._container = L.DomUtil.create("div", "leaflet-areaselect-container", this.map._controlContainer);\u000a        this._topShade = L.DomUtil.create("div", "leaflet-areaselect-shade leaflet-control", this._container);\u000a        this._bottomShade = L.DomUtil.create("div", "leaflet-areaselect-shade leaflet-control", this._container);\u000a        this._leftShade = L.DomUtil.create("div", "leaflet-areaselect-shade leaflet-control", this._container);\u000a        this._rightShade = L.DomUtil.create("div", "leaflet-areaselect-shade leaflet-control", this._container);\u000a\u000a        this._nwHandle = L.DomUtil.create("div", "leaflet-areaselect-handle leaflet-control", this._container);\u000a        this._swHandle = L.DomUtil.create("div", "leaflet-areaselect-handle leaflet-control", this._container);\u000a        this._neHandle = L.DomUtil.create("div", "leaflet-areaselect-handle leaflet-control", this._container);\u000a        this._seHandle = L.DomUtil.create("div", "leaflet-areaselect-handle leaflet-control", this._container);\u000a\u000a        this._setUpHandlerEvents(this._nwHandle);\u000a        this._setUpHandlerEvents(this._neHandle, -1, 1);\u000a        this._setUpHandlerEvents(this._swHandle, 1, -1);\u000a        this._setUpHandlerEvents(this._seHandle, -1, -1);\u000a\u000a        this.map.on("moveend", this._onMapChange, this);\u000a        this.map.on("zoomend", this._onMapChange, this);\u000a        this.map.on("resize", this._onMapResize, this);\u000a\u000a        this.fire("change");\u000a    },\u000a\u000a    _setUpHandlerEvents: function (handle, xMod, yMod) {\u000a        xMod = xMod || 1;\u000a        yMod = yMod || 1;\u000a\u000a        var self = this;\u000a        function onMouseDown(event) {\u000a            event.stopPropagation();\u000a            self.map.dragging.disable();\u000a            L.DomEvent.removeListener(this, "mousedown", onMouseDown);\u000a            var curX = event.pageX;\u000a            var curY = event.pageY;\u000a            var ratio = self._width / self._height;\u000a            var size = self.map.getSize();\u000a\u000a            function onMouseMove(event) {\u000a                if (self.options.keepAspectRatio) {\u000a                    var maxHeight = (self._height >= self._width ? size.y : size.y * (1 / ratio)) - 30;\u000a                    self._height += (curY - event.originalEvent.pageY) * 2 * yMod;\u000a                    self._height = Math.max(30, self._height);\u000a                    self._height = Math.min(maxHeight, self._height);\u000a                    self._width = self._height * ratio;\u000a                } else {\u000a                    self._width += (curX - event.originalEvent.pageX) * 2 * xMod;\u000a                    self._height += (curY - event.originalEvent.pageY) * 2 * yMod;\u000a                    self._width = Math.max(30, self._width);\u000a                    self._height = Math.max(30, self._height);\u000a                    self._width = Math.min(size.x - 30, self._width);\u000a                    self._height = Math.min(size.y - 30, self._height);\u000a                }\u000a\u000a                curX = event.originalEvent.pageX;\u000a                curY = event.originalEvent.pageY;\u000a                self._render();\u000a            }\u000a            function onMouseUp(event) {\u000a                self.map.dragging.enable();\u000a                L.DomEvent.removeListener(self.map, "mouseup", onMouseUp);\u000a                L.DomEvent.removeListener(self.map, "mousemove", onMouseMove);\u000a                L.DomEvent.addListener(handle, "mousedown", onMouseDown);\u000a                self.fire("change");\u000a            }\u000a\u000a            L.DomEvent.addListener(self.map, "mousemove", onMouseMove);\u000a            L.DomEvent.addListener(self.map, "mouseup", onMouseUp);\u000a        }\u000a        L.DomEvent.addListener(handle, "mousedown", onMouseDown);\u000a    },\u000a\u000a    _onMapResize: function () {\u000a        this._render();\u000a    },\u000a\u000a    _onMapChange: function () {\u000a        this.fire("change");\u000a    },\u000a\u000a    _render: function () {\u000a        var size = this.map.getSize();\u000a        var handleOffset = Math.round(this._nwHandle.offsetWidth / 2);\u000a\u000a        var topBottomHeight = Math.round((size.y - this._height) / 2);\u000a        var leftRightWidth = Math.round((size.x - this._width) / 2);\u000a\u000a        function setDimensions(element, dimension) {\u000a            element.style.width = dimension.width + "px";\u000a            element.style.height = dimension.height + "px";\u000a            element.style.top = dimension.top + "px";\u000a            element.style.left = dimension.left + "px";\u000a            element.style.bottom = dimension.bottom + "px";\u000a            element.style.right = dimension.right + "px";\u000a        }\u000a\u000a        setDimensions(this._topShade, { width: size.x, height: topBottomHeight, top: 0, left: 0 });\u000a        setDimensions(this._bottomShade, { width: size.x, height: topBottomHeight, bottom: 0, left: 0 });\u000a        setDimensions(this._leftShade, {\u000a            width: leftRightWidth,\u000a            height: size.y - topBottomHeight * 2,\u000a            top: topBottomHeight,\u000a            left: 0\u000a        });\u000a        setDimensions(this._rightShade, {\u000a            width: leftRightWidth,\u000a            height: size.y - topBottomHeight * 2,\u000a            top: topBottomHeight,\u000a            right: 0\u000a        });\u000a\u000a        setDimensions(this._nwHandle, { left: leftRightWidth - handleOffset, top: topBottomHeight - 7 });\u000a        setDimensions(this._neHandle, { right: leftRightWidth - handleOffset, top: topBottomHeight - 7 });\u000a        setDimensions(this._swHandle, { left: leftRightWidth - handleOffset, bottom: topBottomHeight - 7 });\u000a        setDimensions(this._seHandle, { right: leftRightWidth - handleOffset, bottom: topBottomHeight - 7 });\u000a    }\u000a});\u000a\u000aL.areaSelect = function (options) {\u000a    return new L.AreaSelect(options);\u000a};\u000a\u000a
p1
.