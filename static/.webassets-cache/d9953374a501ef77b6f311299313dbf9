VL.Control.Sidebar = L.Control.extend({ includes: L.Mixin.Events, options: { position: "left" }, initialize: function (t, s) {\u000a    var i, e;for (L.setOptions(this, s), this._sidebar = L.DomUtil.get(t), L.DomUtil.addClass(this._sidebar, "sidebar-" + this.options.position), L.Browser.touch && L.DomUtil.addClass(this._sidebar, "leaflet-touch"), i = this._sidebar.children.length - 1; i >= 0; i--) e = this._sidebar.children[i], "DIV" == e.tagName && L.DomUtil.hasClass(e, "sidebar-content") && (this._container = e);for (this._tabitems = this._sidebar.querySelectorAll("ul.sidebar-tabs > li, .sidebar-tabs > ul > li"), i = this._tabitems.length - 1; i >= 0; i--) this._tabitems[i]._sidebar = this;for (this._panes = [], this._closeButtons = [], i = this._container.children.length - 1; i >= 0; i--) if (e = this._container.children[i], "DIV" == e.tagName && L.DomUtil.hasClass(e, "sidebar-pane")) {\u000a      this._panes.push(e);for (var o = e.querySelectorAll(".sidebar-close"), a = 0, l = o.length; l > a; a++) this._closeButtons.push(o[a]);\u000a    }\u000a  }, addTo: function (t) {\u000a    var s, i;for (this._map = t, s = this._tabitems.length - 1; s >= 0; s--) {\u000a      i = this._tabitems[s];var e = i.querySelector("a");e.hasAttribute("href") && "#" == e.getAttribute("href").slice(0, 1) && L.DomEvent.on(e, "click", L.DomEvent.preventDefault).on(e, "click", this._onClick, i);\u000a    }for (s = this._closeButtons.length - 1; s >= 0; s--) i = this._closeButtons[s], L.DomEvent.on(i, "click", this._onCloseClick, this);return this;\u000a  }, removeFrom: function (t) {\u000a    console.log("removeFrom() has been deprecated, please use remove() instead as support for this function will be ending soon."), this.remove(t);\u000a  }, remove: function () {\u000a    var t, s;for (this._map = null, t = this._tabitems.length - 1; t >= 0; t--) s = this._tabitems[t], L.DomEvent.off(s.querySelector("a"), "click", this._onClick);for (t = this._closeButtons.length - 1; t >= 0; t--) s = this._closeButtons[t], L.DomEvent.off(s, "click", this._onCloseClick, this);return this;\u000a  }, open: function (t) {\u000a    var s, i;for (s = this._panes.length - 1; s >= 0; s--) i = this._panes[s], i.id == t ? L.DomUtil.addClass(i, "active") : L.DomUtil.hasClass(i, "active") && L.DomUtil.removeClass(i, "active");for (s = this._tabitems.length - 1; s >= 0; s--) i = this._tabitems[s], i.querySelector("a").hash == "#" + t ? L.DomUtil.addClass(i, "active") : L.DomUtil.hasClass(i, "active") && L.DomUtil.removeClass(i, "active");return this.fire("content", { id: t }), L.DomUtil.hasClass(this._sidebar, "collapsed") && (this.fire("opening"), L.DomUtil.removeClass(this._sidebar, "collapsed")), this;\u000a  }, close: function () {\u000a    for (var t = this._tabitems.length - 1; t >= 0; t--) {\u000a      var s = this._tabitems[t];L.DomUtil.hasClass(s, "active") && L.DomUtil.removeClass(s, "active");\u000a    }return L.DomUtil.hasClass(this._sidebar, "collapsed") || (this.fire("closing"), L.DomUtil.addClass(this._sidebar, "collapsed")), this;\u000a  }, _onClick: function () {\u000a    L.DomUtil.hasClass(this, "active") ? this._sidebar.close() : L.DomUtil.hasClass(this, "disabled") || this._sidebar.open(this.querySelector("a").hash.slice(1));\u000a  }, _onCloseClick: function () {\u000a    this.close();\u000a  } }), L.control.sidebar = function (t, s) {\u000a  return new L.Control.Sidebar(t, s);\u000a};\u000a\u000a
p1
.